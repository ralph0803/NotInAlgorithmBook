主要思路还是跟Search in Rotated Sorted Array差不多，
还是通过左边界和中间的大小关系来得到左边或者右边有序的信息，
如果左半边有序，那么左半边最小就是左边第一个元素，
可以和当前最小相比取小的，然后走向右半边。
否则，那么就是右半半边第一个元素，然后走向左半边。
这样子每次可以截掉一半元素，所以最后复杂度等价于一个二分查找，是O(logn)，
空间上只有四个变量维护二分和结果，所以是O(1)。

public class Solution {
    /**
     * @param num: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] num) {
        if(num == null || num.length==0)
        return 0;
        int l = 0;
        int r = num.length-1;
        int min = num[0];
        while(l<r-1)
        {
            int m = (l+r)/2;
            if(num[l]<num[m])
            {
                min = Math.min(num[l],min);
                l = m+1;
            }
            else if(num[l]>num[m])
            {
                min = Math.min(num[m],min);
                r = m-1;
            }
            else
            {
                l++;
            }
        }
        min = Math.min(num[r],min);
        min = Math.min(num[l],min);
        return min;
    }
}

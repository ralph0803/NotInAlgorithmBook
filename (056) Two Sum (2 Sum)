找两数之和是否为 target , 如果是找数组中一个值为 target 该多好啊！ 遍历一次就知道了， 我只想说，
too naive... 难道要将数组中所有元素的两两组合都求出来与 target 比较吗？ 时间复杂度显然为 O(n ),
显然不符题目要求。 找一个数时直接遍历即可， 那么可不可以将两个数之和转换为找一个数呢？ 我们先来
看看两数之和为 target 所对应的判断条件—— x + x = target, 可进一步转化为 x = target − x ,
其中 i 和 j 为数组中的下标。 一段神奇的数学推理就将找两数之和转化为了找一个数是否在数组中了！ 可
见数学是多么的重要...

基本思路有了， 现在就来看看怎么实现， 显然我们需要额外的空间(也就是哈希表)来保存已经处理过的 x ,
如果不满足等式条件， 那么我们就往后遍历， 并把之前的元素加入到哈希表中， 如果 target 减去当前索引
后的值在哈希表中找到了， 那么就将哈希表中相应的索引返回， 大功告成！

public class Solution {
    /*
     * @param numbers : An array of Integer
     * @param target : target = numbers[index1] + numbers[index2]
     * @return : [index1 + 1, index2 + 1] (index1 < index2)
         numbers=[2, 7, 11, 15],  target=9
         return [1, 2]
     */
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer,Integer> map = new HashMap<>();

        for (int i = 0; i < numbers.length; i++) {
            if (map.get(numbers[i]) != null) {
                int[] result = {map.get(numbers[i]) + 1, i + 1};
                return result;
            }
            map.put(target - numbers[i], i);
        }
        
        int[] result = {};
        return result;
    }
}

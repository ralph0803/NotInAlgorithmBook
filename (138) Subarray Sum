HashMap用来存sum值，如果遇到在map中本来就有的sum值，说明从这个sum值的key往后到第二次该值的
子数组，和为0. 起始存map.put(0, -1);，因为要返回区间，所以有+1的边界小trick，而起始存map.put(0, -1);
的-1 offset，就可以直接在循环里面直接写+1了。

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number
     *          and the index of the last number
     */
    public ArrayList<Integer> subarraySum(int[] nums) {
        // write your code here
       
        int len = nums.length;
       
        ArrayList<Integer> ans = new ArrayList<Integer>();
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
       
        map.put(0, -1);
       
        int sum = 0;
        for (int i = 0; i < len; i++) {
            sum += nums[i];
           
            if (map.containsKey(sum)) {
                ans.add(map.get(sum) + 1);
                ans.add(i);
                return ans;
            }
            
            map.put(sum, i);
        }
       
        return ans;
    }
}
